You are given the three arrays arr1[], 
arr2[], arr3[] of the same size. 

Find a triplet such that (maximum-minimum) 
in that triplet is the minimum of all the 
triplets. 

A triplet should be selected so that it 
should have one number from each of the 
three given arrays. 

This triplet is the happiest among 
all the possible triplets. 

Print the triplet in decreasing order.

Note: If there are 2 or more smallest 
difference triplets, then the one with 
the smallest sum of its elements should 
be displayed.


Examples:

Input: arr1[] = [5, 2, 8] , arr2[] = 
[10, 7, 12] , arr3[] = [9, 14, 6]

Output: [7, 6, 5]

Explanation: The triplet { 5,7,6 }  has 
difference (maximum - minimum)= (7-5) =2 
which is minimum of all triplets.  


Input: arr1[] = [15, 12, 18, 9] , arr2[] = 
[10, 17, 13, 8] , arr3[] = [14, 16, 11, 5]

Output: [11, 10, 9]


Expected Time Complexity: O(n*logn)
Expected Auxiliary Space: O(1)


Constraints:

1 ≤ arr1.size(),arr2.size(),arr3.size() ≤ 10^5
1 ≤ arr1[i],arr2[i],arr3[i] ≤ 10^5