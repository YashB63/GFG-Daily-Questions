Given two strings a and b, find the minimum number 
of times a has to be repeated such that b becomes 
a substring of the repeated a. 

If b cannot be a substring of a no matter how 
many times it is repeated, return -1.


Example 1:

Input: a = "abcd", b = "cdabcdab"

Output: 3

Explanation: After repeating a three times, 
we get "abcdabcdabcd".


Example 2:

Input: a = "aa", b = "a"

Output: 1

Explanation: B is already a substring of a.


Your Task:  

You don't need to read input or print anything. 

Complete the function repeatedStringMatch() 
which takes strings a and b as input parameters 
and returns the minimum number of operations to 
complete the task. 

If it is not possible then return -1.


Expected Time Complexity: O(|a| * |b|)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ |a|, |b| ≤ 4 * 10^3