Given a linked list of characters and a string str. 

Return all the anagrams of the string 
present in the given linked list. 

In case of overlapping anagrams choose 
the first anagram from left. 

If there is no anagram in the linked 
list, return an empty array.


Examples:

Input: Linked list: a -> b -> c -> a -> d -> b -> c -> a, 
str = bac

Output: [a -> b -> c, b -> c -> a]

Explanation: In the given linked list, there are three anagrams: 
1. a -> b -> c -> a -> d -> b -> c -> a
2. a -> b -> c -> a -> d -> b -> c -> a
3. a -> b -> c -> a -> d -> b -> c -> a

But in 1 and 2, a -> b -> c 
and b -> c-> a are ovelapping.

So we take a -> b -> c as it 
comes first from left.

So the output is: [a->b->c,b->c->a]


Input: Linked list: a -> b -> d -> c -> a, str = bac

Output: -1 

Explanation: There is no anagrams, so the output is -1


Expected Time Complexity: O(n)
Expected Space Complexity: O(1)


Constraints:

1 <= size of linked list <= 106
data of nodes: Only lowercase alphabet