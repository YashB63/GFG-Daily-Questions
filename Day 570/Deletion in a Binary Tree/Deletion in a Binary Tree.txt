Given a binary tree with nodes where all 
elements are unique, implement a function 
that deletes a node with a specified value 
(key) from the tree. 

When a node is deleted, the tree should 
shrink from the bottom, meaning the 
deleted node is replaced by the bottom-most, 
right-most node in the tree. After deletion, 
the binary tree will be printed using in-order 
traversal.


Examples:

Input: root[] = [10, 20, 30], key = 10
 
Output: [20, 30]

Explanation:
The node with the key 10 (the root) is to be deleted. 

The bottom-most, right-most node (30) replaces node 10. 

The modified tree becomes: 

The inorder traversal of the modified tree is [20, 30].


Input: root[] = [10, 20, 30, N, N, N, 40], key = 20
 
Output: [40, 10, 30]

Explanation: 
The node with the key 20 is to be deleted. 

The bottom-most, right-most node (40) 
replaces node 20.
 
The modified tree becomes:

The inorder traversal of the 
modified tree is [40, 10, 30].


Constraints:

1 ≤ number of nodes ≤ 10^4
1 ≤ node->data ≤ 10^6