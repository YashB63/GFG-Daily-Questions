Given a binary array consisting of only 0s and 1s, 
your task is to find the minimum number of swaps 
required to group all 1s. 

If there are no 1s in the array, return -1.

A swap is defined as selecting two indices 
i and j in the array and exchanging the 
elements at these indices, i.e., performing 
a swap(arr[i], arr[j]). 

The goal is to move all 1s into a contiguous 
subarray with the least number of swaps.


Examples:

Input: arr[] = [1, 0, 1, 0, 1]

Output: 1

Explanation: Only 1 swap is required to 
group all 1's together. Swapping index 1 
and 4 will give arr[] = [1, 1, 1, 0, 0]


Input: arr[] = [1, 0, 1, 0, 1, 1] 

Output: 1


Input: arr[] = [0, 0, 0]

Output: -1

Explanation: No 1s are present 
in the array, so return -1.


Expected Time Complexity: O(n).
Expected Auxiliary Space: O(1).


Constraints:

1 ≤ arr.size() ≤ 10^6
0 ≤ arr[i] ≤ 1