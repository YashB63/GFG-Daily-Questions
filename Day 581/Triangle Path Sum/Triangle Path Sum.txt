Given a triangle array, return the minimum 
path sum to reach from top to bottom.

For each step, you may move to an 
adjacent number of the row below. 

More formally, if you are on index i 
on the current row, you may move to 
either index i or index i + 1 on the 
next row.


Examples:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]

Output: 11

Explanation:
     2
   3 4
  6 5 7
 4 1 8 3

The minimum path sum from top 
to bottom is 2 + 3 + 5 + 1 = 11.


Input: triangle = [[10]]

Output: 10


Constraint:

1 <= triangle.size() <= 200
triangle[i].size() =  triangle[i-1].length + 1
1 <= triangle[i][j] <= 1000