Given an array arr[], find the length of the 
longest subsequence such that for all pairs 
(i, j) where i ≠ j, either arr[i] divides 
arr[j] or arr[j] divides arr[i]. 

If no such subsequence exists, return -1.


Examples:

Input : arr[] = [5, 3, 1, 4, 7]

Output : 2

Explanation: Longest Sub Sequence are 
{5,1} , {4,1}, {3,1} etc. So, size is 2.


Input : arr[] = [2, 4, 6, 1, 3, 11]

Output : 3 


Expected Time Complexity: O(n^2).
Expected Auxiliary Space: O(n).


Constraints :

2 ≤ arr.size() ≤ 10^3
1 ≤ arr[i] ≤ 10^5